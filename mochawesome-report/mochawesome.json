{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-16T07:47:58.813Z",
    "end": "2024-08-16T07:47:58.834Z",
    "duration": 21,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0435e4f2-0766-4684-80ea-5905edbb1e50",
      "title": "",
      "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
      "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ef9e4b78-1cb4-4b56-8ef5-96fea9296b30",
          "title": "isNumberEven",
          "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
          "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Instantiates a new NumbersValidator object before each test and assigns it to 'validator'\nvalidator = new NumbersValidator();",
              "err": {},
              "uuid": "d0f643fd-3491-46e0-9652-fcc8a4679607",
              "parentUUID": "ef9e4b78-1cb4-4b56-8ef5-96fea9296b30",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Sets the validator variable to null to clean up memory after each test\nvalidator = null;",
              "err": {},
              "uuid": "2d6a249b-307b-45c7-8b67-9e818b057a3c",
              "parentUUID": "ef9e4b78-1cb4-4b56-8ef5-96fea9296b30",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if number is even",
              "fullTitle": "isNumberEven should return true if number is even",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Using 'expect' to assert that the 'isNumberEven' method returns true when\n// passed the even number 4. The '.to.be.equal(true)' is the actual assertion check.\nexpect(validator.isNumberEven(4)).to.be.equal(true);",
              "err": {},
              "uuid": "4671b1d5-881b-4747-8da3-8827c19ccbc0",
              "parentUUID": "ef9e4b78-1cb4-4b56-8ef5-96fea9296b30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if number is not even",
              "fullTitle": "isNumberEven should return false if number is not even",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven(5)).to.be.equal(false);",
              "err": {},
              "uuid": "15ebba2b-c3b4-4dc1-b3cb-472fbbed1fce",
              "parentUUID": "ef9e4b78-1cb4-4b56-8ef5-96fea9296b30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\nvalidator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "64de5f0c-e2ef-466c-9868-2e7ea2e20095",
              "parentUUID": "ef9e4b78-1cb4-4b56-8ef5-96fea9296b30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5f8d5af7-bfde-40f4-92c2-e3615fe258ee",
              "title": "getEvenNumbersFromArray",
              "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "validator = new NumbersValidator();",
                  "err": {},
                  "uuid": "e3025d40-a1d4-4019-8727-5ee74659c63c",
                  "parentUUID": "5f8d5af7-bfde-40f4-92c2-e3615fe258ee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "validator = null;",
                  "err": {},
                  "uuid": "95eac4f8-725e-496e-a3c4-f4b563118d4d",
                  "parentUUID": "5f8d5af7-bfde-40f4-92c2-e3615fe258ee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should get array an even numbers from the given array of numbers",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray should get array an even numbers from the given array of numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1,2,3,4,4,5,11];\nconst expectedOutput = [2,4,4];\nconst result = validator.getEvenNumbersFromArray(input);\nexpect(result).to.deep.equal(expectedOutput);",
                  "err": {},
                  "uuid": "241a6a69-8b1a-4a83-bb1e-62f7e93989c0",
                  "parentUUID": "5f8d5af7-bfde-40f4-92c2-e3615fe258ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get an empty array from the given array of numbers if there is no even number",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray should get an empty array from the given array of numbers if there is no even number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1,3,5,7];\nconst expectedOutput = [];\nconst result = validator.getEvenNumbersFromArray(input);\nexpect(result).to.deep.equal(expectedOutput);",
                  "err": {},
                  "uuid": "d9136b8b-8e89-49e4-9e0d-456334cf19e2",
                  "parentUUID": "5f8d5af7-bfde-40f4-92c2-e3615fe258ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error with provided string",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray should throw an error with provided string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  validator.getEvenNumbersFromArray([1,2,'t',5]);\n}).to.throw(`[1,2,t,5] is not an array of \"Numbers\"`);",
                  "err": {},
                  "uuid": "086b642b-b088-4ee4-a5bd-55daf62d11b2",
                  "parentUUID": "5f8d5af7-bfde-40f4-92c2-e3615fe258ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "241a6a69-8b1a-4a83-bb1e-62f7e93989c0",
                "d9136b8b-8e89-49e4-9e0d-456334cf19e2",
                "086b642b-b088-4ee4-a5bd-55daf62d11b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f382afb-8b3d-481a-a1a5-46e834b67fca",
              "title": "isAllNumbers",
              "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"isAllNumbers\"",
                  "fullTitle": "isNumberEven isAllNumbers \"before each\" hook in \"isAllNumbers\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "validator = new NumbersValidator();",
                  "err": {},
                  "uuid": "e10016ad-6b28-4b3b-b86c-99183aa15966",
                  "parentUUID": "3f382afb-8b3d-481a-a1a5-46e834b67fca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"isAllNumbers\"",
                  "fullTitle": "isNumberEven isAllNumbers \"after each\" hook in \"isAllNumbers\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "validator = null;",
                  "err": {},
                  "uuid": "4901bc9c-0905-46f4-b383-c21fdafb337f",
                  "parentUUID": "3f382afb-8b3d-481a-a1a5-46e834b67fca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return true if all elements in an array are numbers",
                  "fullTitle": "isNumberEven isAllNumbers should return true if all elements in an array are numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1,2,3,4,5];\nexpect(validator.isAllNumbers(input)).to.be.equal(true);",
                  "err": {},
                  "uuid": "cbf13773-aa2c-4672-9ceb-f3dd0d0450e7",
                  "parentUUID": "3f382afb-8b3d-481a-a1a5-46e834b67fca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if not all elements in an array are numbers",
                  "fullTitle": "isNumberEven isAllNumbers should return false if not all elements in an array are numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1,2,'b',5];\nexpect(validator.isAllNumbers(input)).to.be.equal(false);",
                  "err": {},
                  "uuid": "258f98c4-3b45-4c02-bd4a-a11dc60d8db7",
                  "parentUUID": "3f382afb-8b3d-481a-a1a5-46e834b67fca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not array",
                  "fullTitle": "isNumberEven isAllNumbers should throw an error if input is not array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  validator.isAllNumbers('am');\n}).to.Throw('[am] is not an array');",
                  "err": {},
                  "uuid": "c3c023a5-8e94-4d2c-bf33-78c08d80638f",
                  "parentUUID": "3f382afb-8b3d-481a-a1a5-46e834b67fca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbf13773-aa2c-4672-9ceb-f3dd0d0450e7",
                "258f98c4-3b45-4c02-bd4a-a11dc60d8db7",
                "c3c023a5-8e94-4d2c-bf33-78c08d80638f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec738dee-fefc-4b50-9dbb-e2f5a60374ca",
              "title": "isInteger",
              "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"isInteger\"",
                  "fullTitle": "isNumberEven isInteger \"before each\" hook in \"isInteger\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "validator = new NumbersValidator();",
                  "err": {},
                  "uuid": "e8d8d303-5c36-4f1d-8e7f-757339278517",
                  "parentUUID": "ec738dee-fefc-4b50-9dbb-e2f5a60374ca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"isInteger\"",
                  "fullTitle": "isNumberEven isInteger \"after each\" hook in \"isInteger\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "validator = null;",
                  "err": {},
                  "uuid": "6c82ff26-1e15-49ba-9bf0-53f045f4784f",
                  "parentUUID": "ec738dee-fefc-4b50-9dbb-e2f5a60374ca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return true if a value is an integer",
                  "fullTitle": "isNumberEven isInteger should return true if a value is an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(validator.isInteger(4)).to.be.equal(true);",
                  "err": {},
                  "uuid": "575135d8-65ad-49c1-bd87-be96a66b93dc",
                  "parentUUID": "ec738dee-fefc-4b50-9dbb-e2f5a60374ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if a value is not an integer",
                  "fullTitle": "isNumberEven isInteger should return false if a value is not an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(validator.isInteger(3.5)).to.be.equal(false);",
                  "err": {},
                  "uuid": "7abc9685-27d4-442f-873f-406c644cc6d4",
                  "parentUUID": "ec738dee-fefc-4b50-9dbb-e2f5a60374ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should trow an error if a value is not a number",
                  "fullTitle": "isNumberEven isInteger should trow an error if a value is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  validator.isInteger('am');\n}).to.Throw('[am] is not a number');",
                  "err": {},
                  "uuid": "43eb1f7d-14f7-4b82-b485-f55aece86096",
                  "parentUUID": "ec738dee-fefc-4b50-9dbb-e2f5a60374ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "575135d8-65ad-49c1-bd87-be96a66b93dc",
                "7abc9685-27d4-442f-873f-406c644cc6d4",
                "43eb1f7d-14f7-4b82-b485-f55aece86096"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "4671b1d5-881b-4747-8da3-8827c19ccbc0",
            "15ebba2b-c3b4-4dc1-b3cb-472fbbed1fce",
            "64de5f0c-e2ef-466c-9868-2e7ea2e20095"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}