{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-14T14:24:43.023Z",
    "end": "2024-08-14T14:24:43.045Z",
    "duration": 22,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b2595048-a9e2-4ca5-9440-533f05d6fa4a",
      "title": "",
      "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
      "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "da34ea63-50b9-42ca-a1f1-25201ccde234",
          "title": "isNumberEven",
          "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
          "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Instantiates a new NumbersValidator object before each test and assigns it to 'validator'\nvalidator = new NumbersValidator();",
              "err": {},
              "uuid": "f1d13276-aa0a-46bc-adf4-5ceb65c83bf9",
              "parentUUID": "da34ea63-50b9-42ca-a1f1-25201ccde234",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Sets the validator variable to null to clean up memory after each test\nvalidator = null;",
              "err": {},
              "uuid": "d95f777f-8c44-45c2-bc8f-7f2fd34b02f8",
              "parentUUID": "da34ea63-50b9-42ca-a1f1-25201ccde234",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if number is even",
              "fullTitle": "isNumberEven should return true if number is even",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Using 'expect' to assert that the 'isNumberEven' method returns true when\n// passed the even number 4. The '.to.be.equal(true)' is the actual assertion check.\nexpect(validator.isNumberEven(4)).to.be.equal(true);",
              "err": {},
              "uuid": "ffc79938-0e8a-46d7-be0a-be214249f7f2",
              "parentUUID": "da34ea63-50b9-42ca-a1f1-25201ccde234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if number is even",
              "fullTitle": "isNumberEven should return false if number is even",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven(5)).to.be.equal(false);",
              "err": {},
              "uuid": "f34c481c-c40f-4ddf-af25-a3f9f4b703f8",
              "parentUUID": "da34ea63-50b9-42ca-a1f1-25201ccde234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\nvalidator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "0a6352f0-76ed-4f4d-8250-e805a727aa6e",
              "parentUUID": "da34ea63-50b9-42ca-a1f1-25201ccde234",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "198f7a5f-7abb-4eca-ab60-f34a6462f088",
              "title": "getEvenNumbersFromArray",
              "fullFile": "C:\\Users\\Евгения\\Tests-home-tasks\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "file": "\\test\\numbers_validator\\isNumberEven.spec.mjs",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "myInstance = new NumbersValidator();",
                  "err": {},
                  "uuid": "900a961b-8992-437d-a932-bcb611b64b2b",
                  "parentUUID": "198f7a5f-7abb-4eca-ab60-f34a6462f088",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "myInstance = null;",
                  "err": {},
                  "uuid": "d3bd0a8e-c281-4e2b-b158-2ffb41a307b8",
                  "parentUUID": "198f7a5f-7abb-4eca-ab60-f34a6462f088",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should get array an even numbers from the given array of numbers",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray should get array an even numbers from the given array of numbers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1,2,3,4,4,5,11];\nconst expectedOutput = [2,4,4];\nconst result = myInstance.getEvenNumbersFromArray(input);\nexpect(result).to.deep.equal(expectedOutput);",
                  "err": {},
                  "uuid": "4d2e27d8-a71f-477c-9da1-f05c95348ca5",
                  "parentUUID": "198f7a5f-7abb-4eca-ab60-f34a6462f088",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get an empty array from the given array of numbers if there is no even number",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray should get an empty array from the given array of numbers if there is no even number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = [1,3,5,7];\nconst expectedOutput = [];\nconst result = myInstance.getEvenNumbersFromArray(input);\nexpect(result).to.deep.equal(expectedOutput);",
                  "err": {},
                  "uuid": "9e97af42-45af-45f6-8aa4-944ca7e33940",
                  "parentUUID": "198f7a5f-7abb-4eca-ab60-f34a6462f088",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error with provided string",
                  "fullTitle": "isNumberEven getEvenNumbersFromArray should throw an error with provided string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  myInstance.getEvenNumbersFromArray([1,2,'t',5]);\n}).to.throw(`[1,2,t,5] is not an array of \"Numbers\"`);",
                  "err": {},
                  "uuid": "66f20022-a711-41f4-a335-0d17ae71cf64",
                  "parentUUID": "198f7a5f-7abb-4eca-ab60-f34a6462f088",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d2e27d8-a71f-477c-9da1-f05c95348ca5",
                "9e97af42-45af-45f6-8aa4-944ca7e33940",
                "66f20022-a711-41f4-a335-0d17ae71cf64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "ffc79938-0e8a-46d7-be0a-be214249f7f2",
            "f34c481c-c40f-4ddf-af25-a3f9f4b703f8",
            "0a6352f0-76ed-4f4d-8250-e805a727aa6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}